# .github/workflows/android-qt-build.yml

name: Build Android APK (Qt for Python)

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual triggering

jobs:
  build-android-qt:
    # Using ubuntu-latest. Consider a custom Docker image for faster/more reliable builds.
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out the repository code
    - name: Check out code
      uses: actions/checkout@v4

    # Step 2: Set up Java (Needed for Android SDK tools and Gradle)
    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17' # Check Gradle requirements, 17 is common

    # Step 3: Set up Python
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10' # Ensure compatibility with PySide6 6.5.x

    # Step 4: Install Python Dependencies
    - name: Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyside6 molmass # Make sure PySide6 version matches Qt version below if needed

    # Step 5: Verify qt_for_python_android_deploy.json exists
    - name: Verify JSON config exists
      run: |
        if [ ! -f qt_for_python_android_deploy.json ]; then
          echo "ERROR: qt_for_python_android_deploy.json not found!"
          exit 1
        fi
        echo "qt_for_python_android_deploy.json found."
        cat qt_for_python_android_deploy.json

    # Step 6: Prepare Android Resources (Copy icon)
    - name: Prepare Android Resources
      run: |
        mkdir -p src/res/drawable # Create standard drawable directory in source area
        if [ -f "data/icon.png" ]; then
          cp data/icon.png src/res/drawable/icon.png
          echo "Copied icon from data/icon.png to src/res/drawable/"
        else
          echo "Warning: data/icon.png not found. App might not have an icon."
        fi
        # Place custom AndroidManifest.xml or themes.xml in 'src/' if needed

    # --- Environment Setup ---
    # Step 7: Install Qt for Android using install-qt-action
    # This action downloads Qt, necessary Android NDK implicitly/explicitly,
    # and sets environment variables like Qt6_DIR or QT_DIR.
    - name: Install Qt for Android
      uses: jurplel/install-qt-action@v3
      with:
        # Specify the Qt version matching your PySide6 if necessary, or latest stable
        version: '6.5.3'
        # Specify the target Android architecture(s)
        arch: 'android_arm64_v8a' # Build for 64-bit ARM. Add others like 'android_armeabi_v7a' if needed.
        # Optional: Specify extra Qt modules if your app needs them beyond Core/Gui/Widgets
        # modules: ''
        # Optional: Caching can speed up subsequent runs
        # cache: 'true'

    # Step 8: Setup Android SDK (Ensure necessary build-tools/platforms are available)
    # While install-qt-action might bundle NDK, this ensures SDK tools are set up.
    - name: Setup Android SDK components
      uses: android-actions/setup-android@v3
      # This action typically sets ANDROID_HOME and ANDROID_SDK_ROOT

    # Step 9: Run androiddeployqt
    - name: Run androiddeployqt
      run: |
        # Ensure output directory exists
        mkdir -p build-android
        # Use the environment variable set by install-qt-action (usually Qt6_DIR or QT_DIR)
        # Check the action's output logs to confirm the variable name
        echo "Using Qt directory: $Qt6_DIR" # Assumes Qt6_DIR, adjust if needed
        $Qt6_DIR/bin/androiddeployqt \
          --input qt_for_python_android_deploy.json \
          --output build-android \
          --android-platform android-33 \
          --gradle # Generate a Gradle project (recommended)
      # Add environment variables if setup-android didn't set them globally for subsequent steps
      # env:
      #   ANDROID_SDK_ROOT: ${{ env.ANDROID_HOME }} # Example if setup-android sets ANDROID_HOME
      #   ANDROID_NDK_ROOT: # Path to NDK (often bundled by install-qt-action, might need discovery)

    # Step 10: Build with Gradle
    - name: Build with Gradle
      working-directory: ./build-android # Change to the directory created by androiddeployqt
      run: |
        # Make gradlew executable
        chmod +x ./gradlew
        # Run the Gradle build for a debug APK
        # Gradle should pick up ANDROID_SDK_ROOT/ANDROID_NDK_ROOT from environment
        ./gradlew assembleDebug
        # For release: ./gradlew assembleRelease (requires signing setup)

    # Step 11: Upload the generated APK as an artifact
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: MolarMass-Android-Debug-APK # Descriptive name
        # Path to the generated APK file within the Gradle project structure
        path: ./build-android/build/outputs/apk/debug/*.apk
        if-no-files-found: error # Fail if APK is not found
