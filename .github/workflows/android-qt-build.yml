# .github/workflows/android-qt-build.yml

name: Build Android APK (Qt for Python)

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual triggering

jobs:
  build-android-qt:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out code
    - name: Check out code
      uses: actions/checkout@v4

    # Step 2: Set up Java (Needed for Android SDK/Gradle)
    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17' # Often required by modern Android Gradle Plugin

    # Step 3: Set up Python
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        # Using 3.11 as seen in your logs, but 3.10 should also work
        python-version: '3.11'

    # Step 4: Install Python Dependencies
    - name: Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        # Install PySide6 first, then other dependencies
        pip install pyside6==6.5.3 # Pin to match Qt version for consistency
        pip install molmass aqtinstall beautifulsoup4 bs4 certifi charset-normalizer defusedxml humanize idna patch py7zr requests semantic-version soupsieve typing-extensions urllib3

    # Step 5: Verify JSON config exists
    - name: Verify JSON config exists
      run: |
        if [ ! -f qt_for_python_android_deploy.json ]; then
          echo "ERROR: qt_for_python_android_deploy.json not found!"
          exit 1
        fi
        echo "qt_for_python_android_deploy.json found."
        cat qt_for_python_android_deploy.json

    # Step 6: Prepare Android Resources (Optional, if needed)
    - name: Prepare Android Resources
      run: |
        mkdir -p src/res/drawable
        if [ -f "data/icon.png" ]; then
          cp data/icon.png src/res/drawable/icon.png
          echo "Copied icon from data/icon.png to src/res/drawable/"
        else
          echo "Warning: data/icon.png not found."
        fi

    # --- Environment Setup ---

    # Step 7a: Install Qt for Desktop (Host Tools)
    # We need qttools (containing androiddeployqt) for the host machine
    - name: Install Qt for Desktop (Host Tools)
      uses: jurplel/install-qt-action@v3
      id: install_qt_host # Give it an ID to potentially reference outputs if needed
      with:
        version: '6.5.3'
        host: 'linux'
        target: 'desktop'
        arch: 'gcc_64'
        # Install qttools for the host; qtbase is usually included as a dependency
        modules: 'qttools'
        # Use caching to speed up builds
        cache: 'true'
        # Specify install directory to keep things organized
        dir: '${{ github.workspace }}/qt_host'

    # Step 7b: Install Qt for Android (Target Libraries)
    # We need qtbase libraries compiled for the Android target architecture
    - name: Install Qt for Android (Target Libraries)
      uses: jurplel/install-qt-action@v3
      id: install_qt_target # Give it an ID
      with:
        version: '6.5.3'
        host: 'linux'
        target: 'android'
        arch: 'android_arm64_v8a'
        # Only need core libraries for the target device
        modules: 'qtbase'
        # Use caching
        cache: 'true'
        # Specify a separate install directory
        dir: '${{ github.workspace }}/qt_target'
        # Set environment variables like Qt6_DIR for this installation
        # This is important for androiddeployqt to find the target libs
        setup-python: 'false' # Don't mess with Python path here if already set

    # Step 8: Setup Android SDK components
    # Installs SDK, NDK, build-tools etc. and sets ANDROID_SDK_ROOT, ANDROID_NDK_ROOT
    - name: Setup Android SDK components
      uses: android-actions/setup-android@v3
      # No specific versions needed here unless you have strict requirements
      # The action usually picks reasonable defaults compatible with Qt

    # Step 9: Run androiddeployqt
    - name: Run androiddeployqt
      env:
         # Ensure Qt6_DIR points to the *target* installation for androiddeployqt
         Qt6_DIR: ${{ github.workspace }}/qt_target/6.5.3/android_arm64_v8a
         # Explicitly add host tools bin directory to PATH
         PATH: ${{ github.workspace }}/qt_host/6.5.3/gcc_64/bin:$PATH
      run: |
        echo "--- Environment Variables ---"
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
        echo "ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT"
        echo "Qt6_DIR=$Qt6_DIR"
        echo "Host Qt Tools Path: ${{ github.workspace }}/qt_host/6.5.3/gcc_64/bin"
        echo "Which androiddeployqt: $(which androiddeployqt)"
        echo "--- Running androiddeployqt ---"

        mkdir -p build-android

        # Run the tool from the host installation's bin directory
        # Qt6_DIR (pointing to target libs) should be picked up from env
        androiddeployqt \
          --input qt_for_python_android_deploy.json \
          --output build-android \
          --android-platform android-33 \
          --gradle

        echo "--- androiddeployqt Finished ---"
        ls -l build-android # Verify output directory contents


    # Step 10: Build with Gradle
    - name: Build with Gradle
      working-directory: ./build-android
      run: |
        echo "--- Building with Gradle ---"
        # Ensure gradlew is executable (sometimes needed)
        chmod +x ./gradlew

        # Check required env vars are set (should be by setup-android)
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
        echo "ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT"

        # Run the Gradle build
        ./gradlew assembleDebug --info # Use --info or --debug for more logs if needed

        echo "--- Gradle Build Finished ---"
        # List the output APKs for verification
        ls -l build/outputs/apk/debug/

    # Step 11: Upload APK artifact
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: MolarMass-Android-Debug-APK
        # Path might vary slightly, adjust if needed after checking Gradle output
        path: ./build-android/build/outputs/apk/debug/*.apk
        if-no-files-found: error # Keep this to fail if APK isn't found
