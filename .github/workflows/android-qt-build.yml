# .github/workflows/android-qt-build.yml

name: Build Android APK (Qt for Python)

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual triggering

jobs:
  build-android-qt:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out code
    - name: Check out code
      uses: actions/checkout@v4

    # Step 2: Set up Java
    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    # Step 3: Set up Python
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    # Step 4: Install Python Dependencies
    - name: Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyside6 molmass

    # Step 5: Verify JSON config exists
    - name: Verify JSON config exists
      run: |
        if [ ! -f qt_for_python_android_deploy.json ]; then
          echo "ERROR: qt_for_python_android_deploy.json not found!"
          exit 1
        fi
        echo "qt_for_python_android_deploy.json found."
        cat qt_for_python_android_deploy.json

    # Step 6: Prepare Android Resources
    - name: Prepare Android Resources
      run: |
        mkdir -p src/res/drawable
        if [ -f "data/icon.png" ]; then
          cp data/icon.png src/res/drawable/icon.png
          echo "Copied icon from data/icon.png to src/res/drawable/"
        else
          echo "Warning: data/icon.png not found."
        fi

    # --- Environment Setup ---
    # Step 7: Install Qt for Android using install-qt-action
    - name: Install Qt for Android
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.5.3'
        # Use 'android' target arch instead of specific ABI initially
        arch: 'android'
        # Explicitly add Android tools (includes androiddeployqt)
        tools: 'tools_android'
        # Add base archives/modules that are commonly needed
        archives: 'qtbase qtdeclarative'
        modules: 'qttools'
        # Optional: cache: 'true'

    # Step 8: Setup Android SDK components (May still be needed for Gradle/other tools)
    - name: Setup Android SDK components
      uses: android-actions/setup-android@v3
      # This ensures things like 'adb', 'platform-tools', necessary 'build-tools', etc. are available

    # Step 9: Run androiddeployqt
    # Uses the Qt installation path provided by install-qt-action
    - name: Run androiddeployqt
      run: |
        mkdir -p build-android
        echo "Using Qt directory (likely): $Qt6_DIR or $QT_DIR" # Check action logs for exact var name
        # Adjust variable if action uses QT_DIR instead of Qt6_DIR
        $Qt6_DIR/bin/androiddeployqt \
          --input qt_for_python_android_deploy.json \
          --output build-android \
          --android-platform android-33 \
          --gradle

    # Step 10: Build with Gradle
    - name: Build with Gradle
      working-directory: ./build-android
      run: |
        chmod +x ./gradlew
        ./gradlew assembleDebug

    # Step 11: Upload APK artifact
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: MolarMass-Android-Debug-APK
        path: ./build-android/build/outputs/apk/debug/*.apk
        if-no-files-found: error
